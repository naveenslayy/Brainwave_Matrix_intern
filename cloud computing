mkdir my-web-app
cd my-web-app
npm init -y
npm install express
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "index.js"]
docker build -t my-web-app .
docker run -p 3000:3000 my-web-app
aws ecr create-repository --repository-name my-web-app
aws ecr get-login-password --region <your-region> | docker login --username AWS --password-stdin <your-account-id>.dkr.ecr.<your-region>.amazonaws.com
docker tag my-web-app:latest <your-account-id>.dkr.ecr.<your-region>.amazonaws.com/my-web-app:latest
docker push <your-account-id>.dkr.ecr.<your-region>.amazonaws.com/my-web-app:latest
eksctl create cluster --name my-cluster --region <your-region> --nodegroup-name standard-workers --node-type t2.micro --nodes 3
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-web-app
  template:
    metadata:
      labels:
        app: my-web-app
    spec:
      containers:
      - name: my-web-app
        image: <your-account-id>.dkr.ecr.<your-region>.amazonaws.com/my-web-app:latest
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: my-web-app-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: my-web-app
kubectl apply -f deployment.yaml
kubectl get deployments
kubectl get services
